class com.sap.sample.procop.Procop extends Component {

/* Returns the Key of the currently selected Tree Element. */
	String getSelectedNodeKey() {*
		return this.selectedNode;
	*}
	
	/* Returns the result set of the data source. */
	String getSavedData() {*
		return this.savedData;
	*}
	
	/* Returns the Dimension Key containing the hierarchy of the datasource. */
	String getHierarchyDimensionKey() {*
		return this.dimHierarchy;
	*}
	
	/* Returns the Key Figure holding the BEX exception */
	String getExceptionKF() {*
		return this.kfExceptionKey;
	*}
	
	/* Returns Driver Dimension 1 */
	String getDimDriverTop() {*
		return this.dimDriverTop;
	*}
	
	/* Returns Driver Dimension 2 */
	String getDimDriverBottom() {*
		return this.dimDriverBottom;
	*}
	
	/* Returns Driver 1 member key */
	String getDriver1Index() {*
		return this.driver1Index;
	*}
	
	/* Returns Driver 2 member key */
	String getDriver2Index() {*
		return this.driver2Index;
	*}
	
	/* Returns conditional format value array */
	Array getConditionalFormatMultiDim() {*
		return this.conditionalFormatMultiDim;
	*}
	
	/* Expand the hierarchy */
	/* @Visibility(private) */
	void expandHierarchyNode() {*
	    this.getDataSource().expandNode(this.getHierarchyDimensionKey(), this.getSelectedNodeKey());
	*}
	
	/* Collapse the hierarchy */
	/* @Visibility(private) */
	void collapseHierarchyNode() {*
		this.getDataSource().collapseNode(this.getHierarchyDimensionKey(), this.getSelectedNodeKey());
	*}
	
	/* Return conditional formatting values in an array from BEX query */
	void setTrafficLightValueArray() {*
			var that = this;
			
			try{  
  			if(DEBUG) { DEBUG.openZtl(that)}; 
  			var l = {}; 
			
			l.condFormatStringCollection = this.conditionalFormatMultiDim,
			l.condFormatArray = [],
			l.conditionalFormatArrayFinal = [],
			l.condFormatValueArray = [];
			if(DEBUG) { DEBUG.inspectZtl(that, l)};
			l.condFormatArray = l.condFormatStringCollection.split(/([,])(?=[{])/);
			for(var i=0;i<l.condFormatArray.length;i++) {
			var tmpResult = l.condFormatArray[i];
			if (tmpResult !== ",") {
			l.conditionalFormatArrayFinal.push(tmpResult);
				}
			}
       
      		 //debug for BIAL getter		
       		this.finalCondForm = l.conditionalFormatArrayFinal[1];
			
			for(var i=0;i<l.conditionalFormatArrayFinal.length;i++) {
			var conditionalFormatMultiDimNode = JSON.parse(l.conditionalFormatArrayFinal[i]);	
			var trafficLightValue = this.getDataSource().getConditionalFormatValueExt(this.getExceptionKF(), conditionalFormatMultiDimNode); 
			l.condFormatValueArray.push(trafficLightValue);
			}
			if(DEBUG) { DEBUG.inspectZtl(that, l)};
			if(DEBUG) { DEBUG.exitZtl(that, l)};
			 }
			catch (e) {
  			if(DEBUG) { DEBUG.processZtlException(that, l, e)};throw e;
  				}	 
		
		this.trafficLightArray = JSON.stringify(l.condFormatValueArray);
	*}
	
	String getTrafficLightArray() {*
		return this.trafficLightArray;
	*}
	
	String getFinalCondForm() {*
		return this.finalCondForm;
	*}
	
}